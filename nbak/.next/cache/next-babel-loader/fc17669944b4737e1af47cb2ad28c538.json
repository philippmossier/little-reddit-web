{"ast":null,"code":"var _jsxFileName = \"/home/phil/code/gh/fullstack/lireddit/little-reddit-web/src/pages/register.tsx\";\nvar __jsx = React.createElement;\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/dist/client/router';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useRegisterMutation } from '../generated/graphql';\nimport * as styles from '../page-styles/styles';\nimport createUrqlClient from '../utils/createUrqlClient';\nimport { toErrorMap } from '../utils/toErrorMap';\n\nconst Register = () => {\n  const [, registerMut] = useRegisterMutation(); // mutation hook from '@graphql-codegen/typescript-urql'\n\n  const {\n    register,\n    handleSubmit,\n    formState,\n    setError,\n    errors\n  } = useForm();\n  const {\n    isSubmitting\n  } = formState;\n  const router = useRouter();\n\n  const onSubmit = async data => {\n    var _response$data, _response$data2;\n\n    const response = await registerMut(data); // if no connection\n\n    if (!response) console.log('Promise unresolved, check connection');\n    if (response.error) console.log('Error occured in onSubmit:', response.error);\n\n    if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.register.errors) {\n      console.log(toErrorMap(response.data.register.errors));\n      const errorObj = toErrorMap(response.data.register.errors);\n      if ('username' in errorObj) setError('username', {\n        message: errorObj.username\n      });\n      if ('password' in errorObj) setError('password', {\n        message: errorObj.password\n      });\n    } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.register.user) {\n      console.log('Successfull registered:', response.data);\n      router.push('/');\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.headerContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    className: styles.headerLogo,\n    src: \"https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg\",\n    alt: \"Workflow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), __jsx(\"h2\", {\n    className: styles.headerTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Register a account\")), __jsx(\"div\", {\n    className: styles.formContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"username\",\n    className: styles.usernameLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Username\"), __jsx(\"div\", {\n    className: styles.usernameInputContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    name: \"username\",\n    ref: register({\n      required: true\n    }),\n    className: styles.usernameInputField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }), errors.username && __jsx(\"div\", {\n    className: \"text-red-500 font-bold text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 35\n    }\n  }, errors.username.message))), __jsx(\"div\", {\n    className: \"mt-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"password\",\n    className: styles.passwordLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Password\"), __jsx(\"div\", {\n    className: styles.passwordInputContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    name: \"password\",\n    ref: register({\n      required: true\n    }),\n    className: styles.passwordInputField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }), errors.password && __jsx(\"div\", {\n    className: \"text-red-500 font-bold text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 35\n    }\n  }, errors.password.message))), __jsx(\"div\", {\n    className: \"mt-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, isSubmitting ? __jsx(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    className: styles.submitButton(isSubmitting),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, \"Sign in\") : __jsx(\"button\", {\n    type: \"submit\",\n    className: styles.submitButton(isSubmitting),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, \"Sign in\")))));\n};\n\nexport default withUrqlClient(createUrqlClient)(Register);","map":{"version":3,"sources":["/home/phil/code/gh/fullstack/lireddit/little-reddit-web/src/pages/register.tsx"],"names":["withUrqlClient","useRouter","React","useForm","useRegisterMutation","styles","createUrqlClient","toErrorMap","Register","registerMut","register","handleSubmit","formState","setError","errors","isSubmitting","router","onSubmit","data","response","console","log","error","errorObj","message","username","password","user","push","container","headerContainer","headerLogo","headerTitle","formContainer","usernameLabel","usernameInputContainer","required","usernameInputField","passwordLabel","passwordInputContainer","passwordInputField","submitButton"],"mappings":"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","sourcesContent":["import { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/dist/client/router';\nimport React, { FC, ReactElement } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useRegisterMutation } from '../generated/graphql';\nimport * as styles from '../page-styles/styles';\nimport createUrqlClient from '../utils/createUrqlClient';\nimport { toErrorMap } from '../utils/toErrorMap';\n\ntype FormValues = {\n  username: string;\n  password: string;\n};\n\nconst Register: FC<FormValues> = (): ReactElement => {\n  const [, registerMut] = useRegisterMutation(); // mutation hook from '@graphql-codegen/typescript-urql'\n  const { register, handleSubmit, formState, setError, errors } = useForm<FormValues>();\n  const { isSubmitting } = formState;\n  const router = useRouter();\n\n  const onSubmit = async (data: FormValues) => {\n    const response = await registerMut(data);\n    // if no connection\n    if (!response) console.log('Promise unresolved, check connection');\n    if (response.error) console.log('Error occured in onSubmit:', response.error);\n\n    if (response.data?.register.errors) {\n      console.log(toErrorMap(response.data.register.errors));\n      const errorObj = toErrorMap(response.data.register.errors);\n      if ('username' in errorObj) setError('username', { message: errorObj.username });\n      if ('password' in errorObj) setError('password', { message: errorObj.password });\n    } else if (response.data?.register.user) {\n      console.log('Successfull registered:', response.data);\n      router.push('/');\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.headerContainer}>\n        <img\n          className={styles.headerLogo}\n          src=\"https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg\"\n          alt=\"Workflow\"\n        />\n        <h2 className={styles.headerTitle}>Register a account</h2>\n      </div>\n\n      <div className={styles.formContainer}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div>\n            <label htmlFor=\"username\" className={styles.usernameLabel}>\n              Username\n            </label>\n            <div className={styles.usernameInputContainer}>\n              <input name=\"username\" ref={register({ required: true })} className={styles.usernameInputField} />\n              {errors.username && <div className=\"text-red-500 font-bold text-sm\">{errors.username.message}</div>}\n            </div>\n          </div>\n\n          <div className=\"mt-6\">\n            <label htmlFor=\"password\" className={styles.passwordLabel}>\n              Password\n            </label>\n            <div className={styles.passwordInputContainer}>\n              <input name=\"password\" ref={register({ required: true })} className={styles.passwordInputField} />\n              {errors.password && <div className=\"text-red-500 font-bold text-sm\">{errors.password.message}</div>}\n            </div>\n          </div>\n\n          <div className=\"mt-6\">\n            {isSubmitting ? (\n              <button type=\"submit\" disabled={isSubmitting} className={styles.submitButton(isSubmitting)}>\n                Sign in\n              </button>\n            ) : (\n              <button type=\"submit\" className={styles.submitButton(isSubmitting)}>\n                Sign in\n              </button>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient)(Register);\n"]},"metadata":{},"sourceType":"module"}