{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const RegularUserFragmentDoc = gql`\n  fragment RegularUser on User {\n    id\n    username\n  }\n`;\nexport const LoginDocument = gql`\n  mutation Login($options: UsernamePasswordInput!) {\n    login(options: $options) {\n      errors {\n        field\n        message\n      }\n      user {\n        ...RegularUser\n      }\n    }\n  }\n  ${RegularUserFragmentDoc}\n`;\nexport function useLoginMutation() {\n  return Urql.useMutation(LoginDocument);\n}\nexport const RegisterDocument = gql`\n  mutation Register($username: String!, $password: String!) {\n    register(options: { username: $username, password: $password }) {\n      errors {\n        field\n        message\n      }\n      user {\n        id\n        username\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\nexport const MeDocument = gql`\n  query Me {\n    me {\n      id\n      username\n    }\n  }\n`;\nexport function useMeQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}","map":{"version":3,"sources":["/home/phil/gh/lireddit/little-reddit-web/src/generated/graphql.ts"],"names":["gql","Urql","RegularUserFragmentDoc","LoginDocument","useLoginMutation","useMutation","RegisterDocument","useRegisterMutation","MeDocument","useMeQuery","options","useQuery","query"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAuHA,OAAO,MAAMC,sBAAsB,GAAGF,GAAI;;;;;CAAnC;AAMP,OAAO,MAAMG,aAAa,GAAGH,GAAI;;;;;;;;;;;;IAY7BE,sBAAuB;CAZpB;AAeP,OAAO,SAASE,gBAAT,GAA4B;AACjC,SAAOH,IAAI,CAACI,WAAL,CAAwDF,aAAxD,CAAP;AACD;AACD,OAAO,MAAMG,gBAAgB,GAAGN,GAAI;;;;;;;;;;;;;;;CAA7B;AAiBP,OAAO,SAASO,mBAAT,GAA+B;AACpC,SAAON,IAAI,CAACI,WAAL,CAA8DC,gBAA9D,CAAP;AACD;AACD,OAAO,MAAME,UAAU,GAAGR,GAAI;;;;;;;CAAvB;AASP,OAAO,SAASS,UAAT,CAAoBC,OAA2D,GAAG,EAAlF,EAAsF;AAC3F,SAAOT,IAAI,CAACU,QAAL;AAAyBC,IAAAA,KAAK,EAAEJ;AAAhC,KAA+CE,OAA/C,EAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  posts: Array<Post>;\n  post?: Maybe<Post>;\n  me?: Maybe<User>;\n};\n\nexport type QueryPostArgs = {\n  id: Scalars['Float'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Float'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  title: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createPost: Post;\n  updatePost?: Maybe<Post>;\n  deletePost: Scalars['Boolean'];\n  register: UserResponse;\n  login: UserResponse;\n};\n\nexport type MutationCreatePostArgs = {\n  title: Scalars['String'];\n};\n\nexport type MutationUpdatePostArgs = {\n  title?: Maybe<Scalars['String']>;\n  id: Scalars['Float'];\n};\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['Float'];\n};\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\nexport type MutationLoginArgs = {\n  options: UsernamePasswordInput;\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type RegularUserFragment = { __typename?: 'User' } & Pick<User, 'id' | 'username'>;\n\nexport type LoginMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login: { __typename?: 'UserResponse' } & {\n    errors?: Maybe<Array<{ __typename?: 'FieldError' } & Pick<FieldError, 'field' | 'message'>>>;\n    user?: Maybe<{ __typename?: 'User' } & RegularUserFragment>;\n  };\n};\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type RegisterMutation = { __typename?: 'Mutation' } & {\n  register: { __typename?: 'UserResponse' } & {\n    errors?: Maybe<Array<{ __typename?: 'FieldError' } & Pick<FieldError, 'field' | 'message'>>>;\n    user?: Maybe<{ __typename?: 'User' } & Pick<User, 'id' | 'username' | 'createdAt' | 'updatedAt'>>;\n  };\n};\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<{ __typename?: 'User' } & Pick<User, 'id' | 'username'>>;\n};\n\nexport const RegularUserFragmentDoc = gql`\n  fragment RegularUser on User {\n    id\n    username\n  }\n`;\nexport const LoginDocument = gql`\n  mutation Login($options: UsernamePasswordInput!) {\n    login(options: $options) {\n      errors {\n        field\n        message\n      }\n      user {\n        ...RegularUser\n      }\n    }\n  }\n  ${RegularUserFragmentDoc}\n`;\n\nexport function useLoginMutation() {\n  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);\n}\nexport const RegisterDocument = gql`\n  mutation Register($username: String!, $password: String!) {\n    register(options: { username: $username, password: $password }) {\n      errors {\n        field\n        message\n      }\n      user {\n        id\n        username\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n}\nexport const MeDocument = gql`\n  query Me {\n    me {\n      id\n      username\n    }\n  }\n`;\n\nexport function useMeQuery(options: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });\n}\n"]},"metadata":{},"sourceType":"module"}