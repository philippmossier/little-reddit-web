{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/home/phil/gh/lireddit/little-reddit-web/src/pages/_app.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport '../styles/index.css';\nimport { createClient, dedupExchange, fetchExchange, Provider } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { MeDocument } from '../generated/graphql';\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, function (data) {\n    return fn(result, data);\n  });\n}\n\nvar client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: function login(_result, args, cache, info) {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, function (result, query) {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: function register(_result, args, cache, info) {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, function (result, query) {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        },\n        logout: function logout(_result, args, cache, info) {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, function () {\n            {\n              me: null;\n            }\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction App(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(Provider, {\n    value: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  })), \";\");\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/phil/gh/lireddit/little-reddit-web/src/pages/_app.tsx"],"names":["React","createClient","dedupExchange","fetchExchange","Provider","cacheExchange","MeDocument","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","client","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","info","query","errors","me","user","register","logout","App","Component","pageProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,OAAO,qBAAP;AAEA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,EAAqDC,QAArD,QAAqE,MAArE;AACA,SAASC,aAAT,QAAiD,2BAAjD;AACA,SAAwCC,UAAxC,QAAqF,sBAArF;;AAEA,SAASC,iBAAT,CACEC,KADF,EAEEC,EAFF,EAGEC,MAHF,EAIEC,EAJF,EAKE;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAsB,UAACI,IAAD;AAAA,WAAUF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAZ;AAAA,GAAtB,CAAP;AACD;;AAED,IAAMC,MAAM,GAAGb,YAAY,CAAC;AAC1Bc,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFY;AAK1BC,EAAAA,SAAS,EAAE,CACThB,aADS,EAETG,aAAa,CAAC;AACZc,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,eAACC,OAAD,EAAUC,IAAV,EAAgBf,KAAhB,EAAuBgB,IAAvB,EAAgC;AACrCjB,UAAAA,iBAAiB,CAAyBC,KAAzB,EAAgC;AAAEiB,YAAAA,KAAK,EAAEnB;AAAT,WAAhC,EAAuDgB,OAAvD,EAAgE,UAACZ,MAAD,EAASe,KAAT,EAAmB;AAClG,gBAAIf,MAAM,CAACW,KAAP,CAAaK,MAAjB,EAAyB;AACvB,qBAAOD,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLE,gBAAAA,EAAE,EAAEjB,MAAM,CAACW,KAAP,CAAaO;AADZ,eAAP;AAGD;AACF,WARgB,CAAjB;AASD,SAXO;AAYRC,QAAAA,QAAQ,EAAE,kBAACP,OAAD,EAAUC,IAAV,EAAgBf,KAAhB,EAAuBgB,IAAvB,EAAgC;AACxCjB,UAAAA,iBAAiB,CAA4BC,KAA5B,EAAmC;AAAEiB,YAAAA,KAAK,EAAEnB;AAAT,WAAnC,EAA0DgB,OAA1D,EAAmE,UAACZ,MAAD,EAASe,KAAT,EAAmB;AACrG,gBAAIf,MAAM,CAACmB,QAAP,CAAgBH,MAApB,EAA4B;AAC1B,qBAAOD,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLE,gBAAAA,EAAE,EAAEjB,MAAM,CAACmB,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WARgB,CAAjB;AASD,SAtBO;AAuBRE,QAAAA,MAAM,EAAE,gBAACR,OAAD,EAAUC,IAAV,EAAgBf,KAAhB,EAAuBgB,IAAvB,EAAgC;AACtCjB,UAAAA,iBAAiB,CAA0BC,KAA1B,EAAiC;AAAEiB,YAAAA,KAAK,EAAEnB;AAAT,WAAjC,EAAwDgB,OAAxD,EAAiE,YAAY;AAC5F;AACEK,cAAAA,EAAE,EAAE;AACL;AACF,WAJgB,CAAjB;AAKD;AA7BO;AADH;AADG,GAAD,CAFJ,EAqCTxB,aArCS;AALe,CAAD,CAA3B;;AA8CA,SAAS4B,GAAT,OAA+D;AAAA,MAAhDC,SAAgD,QAAhDA,SAAgD;AAAA,MAArCC,SAAqC,QAArCA,SAAqC;AAC7D,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEnB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAemB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,MADF;AAKD;;KANQF,G;AAQT,eAAeA,GAAf","sourcesContent":["import React, { ReactElement } from 'react';\nimport '../styles/index.css';\nimport { AppProps } from 'next/app';\nimport { createClient, dedupExchange, fetchExchange, Provider } from 'urql';\nimport { cacheExchange, Cache, QueryInput } from '@urql/exchange-graphcache';\nimport { LoginMutation, LogoutMutation, MeDocument, MeQuery, RegisterMutation } from '../generated/graphql';\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query,\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any);\n}\n\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include',\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(cache, { query: MeDocument }, _result, (result, query) => {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user,\n                };\n              }\n            });\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(cache, { query: MeDocument }, _result, (result, query) => {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user,\n                };\n              }\n            });\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(cache, { query: MeDocument }, _result, (): null => {\n              {\n                me: null;\n              }\n            });\n          },\n        },\n      },\n    }),\n    fetchExchange,\n  ],\n});\n\nfunction App({ Component, pageProps }: AppProps): ReactElement {\n  return (\n    <Provider value={client}>\n      <Component {...pageProps} />;\n    </Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}