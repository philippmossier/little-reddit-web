{"ast":null,"code":"var _jsxFileName = \"/home/phil/gh/lireddit/little-reddit-web/src/pages/_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport '../styles/index.css';\nimport { createClient, dedupExchange, fetchExchange, Provider } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from '../utils/betterUpdateQuery';\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        },\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction App({\n  Component,\n  pageProps\n}) {\n  return __jsx(Provider, {\n    value: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  })), \";\");\n}\n\nexport default App;","map":{"version":3,"sources":["/home/phil/gh/lireddit/little-reddit-web/src/pages/_app.tsx"],"names":["React","createClient","dedupExchange","fetchExchange","Provider","cacheExchange","MeDocument","betterUpdateQuery","client","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","cache","info","query","result","errors","me","user","register","logout","App","Component","pageProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,OAAO,qBAAP;AAEA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,EAAqDC,QAArD,QAAqE,MAArE;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAAwCC,UAAxC,QAAqF,sBAArF;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AAEA,MAAMC,MAAM,GAAGP,YAAY,CAAC;AAC1BQ,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFY;AAK1BC,EAAAA,SAAS,EAAE,CACTV,aADS,EAETG,aAAa,CAAC;AACZQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACrCZ,UAAAA,iBAAiB,CAAyBW,KAAzB,EAAgC;AAAEE,YAAAA,KAAK,EAAEd;AAAT,WAAhC,EAAuDU,OAAvD,EAAgE,CAACK,MAAD,EAASD,KAAT,KAAmB;AAClG,gBAAIC,MAAM,CAACN,KAAP,CAAaO,MAAjB,EAAyB;AACvB,qBAAOF,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLG,gBAAAA,EAAE,EAAEF,MAAM,CAACN,KAAP,CAAaS;AADZ,eAAP;AAGD;AACF,WARgB,CAAjB;AASD,SAXO;AAYRC,QAAAA,QAAQ,EAAE,CAACT,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACxCZ,UAAAA,iBAAiB,CAA4BW,KAA5B,EAAmC;AAAEE,YAAAA,KAAK,EAAEd;AAAT,WAAnC,EAA0DU,OAA1D,EAAmE,CAACK,MAAD,EAASD,KAAT,KAAmB;AACrG,gBAAIC,MAAM,CAACI,QAAP,CAAgBH,MAApB,EAA4B;AAC1B,qBAAOF,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLG,gBAAAA,EAAE,EAAEF,MAAM,CAACI,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WARgB,CAAjB;AASD,SAtBO;AAuBRE,QAAAA,MAAM,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACtCZ,UAAAA,iBAAiB,CAA0BW,KAA1B,EAAiC;AAAEE,YAAAA,KAAK,EAAEd;AAAT,WAAjC,EAAwDU,OAAxD,EAAiE,OAAO;AACvFO,YAAAA,EAAE,EAAE;AADmF,WAAP,CAAjE,CAAjB;AAGD;AA3BO;AADH;AADG,GAAD,CAFJ,EAmCTpB,aAnCS;AALe,CAAD,CAA3B;;AA4CA,SAASwB,GAAT,CAAa;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAb,EAA+D;AAC7D,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAErB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeqB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,MADF;AAKD;;AAED,eAAeF,GAAf","sourcesContent":["import React, { ReactElement } from 'react';\nimport '../styles/index.css';\nimport { AppProps } from 'next/app';\nimport { createClient, dedupExchange, fetchExchange, Provider } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { LoginMutation, LogoutMutation, MeDocument, MeQuery, RegisterMutation } from '../generated/graphql';\nimport { betterUpdateQuery } from '../utils/betterUpdateQuery';\n\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include',\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(cache, { query: MeDocument }, _result, (result, query) => {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user,\n                };\n              }\n            });\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(cache, { query: MeDocument }, _result, (result, query) => {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user,\n                };\n              }\n            });\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(cache, { query: MeDocument }, _result, () => ({\n              me: null,\n            }));\n          },\n        },\n      },\n    }),\n    fetchExchange,\n  ],\n});\n\nfunction App({ Component, pageProps }: AppProps): ReactElement {\n  return (\n    <Provider value={client}>\n      <Component {...pageProps} />;\n    </Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}