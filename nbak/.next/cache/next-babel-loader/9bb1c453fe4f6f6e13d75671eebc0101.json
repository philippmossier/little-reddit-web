{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\n\nvar createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: 'http://localhost:4000/graphql',\n    fetchOptions: {\n      credentials: 'include'\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n};\n\nexport default createUrqlClient;","map":{"version":3,"sources":["/home/phil/gh/lireddit/little-reddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","MeDocument","betterUpdateQuery","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","cache","info","query","result","errors","me","user","register","logout"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAAwCC,UAAxC,QAAqF,sBAArF;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AAC9CC,IAAAA,GAAG,EAAE,+BADyC;AAE9CC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE;AADD,KAFgC;AAK9CC,IAAAA,SAAS,EAAE,CACTT,aADS,EAETD,aAAa,CAAC;AACZW,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,KAAK,EAAE,eAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACrCb,YAAAA,iBAAiB,CAAyBY,KAAzB,EAAgC;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAAhC,EAAuDW,OAAvD,EAAgE,UAACK,MAAD,EAASD,KAAT,EAAmB;AAClG,kBAAIC,MAAM,CAACN,KAAP,CAAaO,MAAjB,EAAyB;AACvB,uBAAOF,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACN,KAAP,CAAaS;AADZ,iBAAP;AAGD;AACF,aARgB,CAAjB;AASD,WAXO;AAYRC,UAAAA,QAAQ,EAAE,kBAACT,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACxCb,YAAAA,iBAAiB,CAA4BY,KAA5B,EAAmC;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAAnC,EAA0DW,OAA1D,EAAmE,UAACK,MAAD,EAASD,KAAT,EAAmB;AACrG,kBAAIC,MAAM,CAACI,QAAP,CAAgBH,MAApB,EAA4B;AAC1B,uBAAOF,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLG,kBAAAA,EAAE,EAAEF,MAAM,CAACI,QAAP,CAAgBD;AADf,iBAAP;AAGD;AACF,aARgB,CAAjB;AASD,WAtBO;AAuBRE,UAAAA,MAAM,EAAE,gBAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACtCb,YAAAA,iBAAiB,CAA0BY,KAA1B,EAAiC;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAAjC,EAAwDW,OAAxD,EAAiE;AAAA,qBAAO;AACvFO,gBAAAA,EAAE,EAAE;AADmF,eAAP;AAAA,aAAjE,CAAjB;AAGD;AA3BO;AADH;AADG,KAAD,CAFJ,EAmCTf,WAnCS,EAoCTJ,aApCS;AALmC,GAAvB;AAAA,CAAzB;;AA6CA,eAAeG,gBAAf","sourcesContent":["import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { LoginMutation, LogoutMutation, MeDocument, MeQuery, RegisterMutation } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\n\nconst createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(cache, { query: MeDocument }, _result, (result, query) => {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user,\n                };\n              }\n            });\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(cache, { query: MeDocument }, _result, (result, query) => {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user,\n                };\n              }\n            });\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(cache, { query: MeDocument }, _result, () => ({\n              me: null,\n            }));\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n\nexport default createUrqlClient;\n"]},"metadata":{},"sourceType":"module"}