{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\n\nconst createUrqlClient = ssrExchange => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        },\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        }\n      }\n    }\n  }), ssrExchange, fetchExchange]\n});\n\nexport default createUrqlClient;","map":{"version":3,"sources":["/home/phil/code/gh/fullstack/littlereddit/little-reddit-web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","MeDocument","betterUpdateQuery","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","cache","info","query","result","errors","me","user","register","logout"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAAwCC,UAAxC,QAAqF,sBAArF;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,MAAMC,gBAAgB,GAAIC,WAAD,KAAuB;AAC9CC,EAAAA,GAAG,EAAE,+BADyC;AAE9CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFgC;AAK9CC,EAAAA,SAAS,EAAE,CACTT,aADS,EAETD,aAAa,CAAC;AACZW,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACrCb,UAAAA,iBAAiB,CAAyBY,KAAzB,EAAgC;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAAhC,EAAuDW,OAAvD,EAAgE,CAACK,MAAD,EAASD,KAAT,KAAmB;AAClG,gBAAIC,MAAM,CAACN,KAAP,CAAaO,MAAjB,EAAyB;AACvB,qBAAOF,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLG,gBAAAA,EAAE,EAAEF,MAAM,CAACN,KAAP,CAAaS;AADZ,eAAP;AAGD;AACF,WARgB,CAAjB;AASD,SAXO;AAYRC,QAAAA,QAAQ,EAAE,CAACT,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACxCb,UAAAA,iBAAiB,CAA4BY,KAA5B,EAAmC;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAAnC,EAA0DW,OAA1D,EAAmE,CAACK,MAAD,EAASD,KAAT,KAAmB;AACrG,gBAAIC,MAAM,CAACI,QAAP,CAAgBH,MAApB,EAA4B;AAC1B,qBAAOF,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLG,gBAAAA,EAAE,EAAEF,MAAM,CAACI,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WARgB,CAAjB;AASD,SAtBO;AAuBRE,QAAAA,MAAM,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACtCb,UAAAA,iBAAiB,CAA0BY,KAA1B,EAAiC;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAAjC,EAAwDW,OAAxD,EAAiE,OAAO;AACvFO,YAAAA,EAAE,EAAE;AADmF,WAAP,CAAjE,CAAjB;AAGD;AA3BO;AADH;AADG,GAAD,CAFJ,EAmCTf,WAnCS,EAoCTJ,aApCS;AALmC,CAAvB,CAAzB;;AA6CA,eAAeG,gBAAf","sourcesContent":["import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { LoginMutation, LogoutMutation, MeDocument, MeQuery, RegisterMutation } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\n\nconst createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include' as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(cache, { query: MeDocument }, _result, (result, query) => {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user,\n                };\n              }\n            });\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(cache, { query: MeDocument }, _result, (result, query) => {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user,\n                };\n              }\n            });\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(cache, { query: MeDocument }, _result, () => ({\n              me: null,\n            }));\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n\nexport default createUrqlClient;\n"]},"metadata":{},"sourceType":"module"}